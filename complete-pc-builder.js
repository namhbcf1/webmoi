// Complete PC Builder JavaScript - Optimized for Mobile
// Global variables
let currentStep = 1;
let selectedBudget = 15;
let selectedCPU = null;
let selectedGame = null;
let currentConfig = {};
let isMobile = false;

// Game data with images
const games = [
    { id: 'valorant', name: 'Valorant', image: 'images/valorant.jpg' },
    { id: 'csgo', name: 'CS:GO', image: 'images/csgo.jpg' },
    { id: 'pubg', name: 'PUBG', image: 'images/pubg.jpg' },
    { id: 'lol', name: 'League of Legends', image: 'images/lol.jpg' },
    { id: 'gta-v', name: 'GTA V', image: 'images/gta-v.jpg' },
    { id: 'elden-ring', name: 'Elden Ring', image: 'images/elden-ring.jpg' },
    { id: 'naraka', name: 'Naraka Bladepoint', image: 'images/naraka.jpg' },
    { id: 'genshin', name: 'Genshin Impact', image: 'images/genshin.jpg' },
    { id: 'fo4', name: 'Fallout 4', image: 'images/fo4.jpg' },
    { id: 'black-myth-wukong', name: 'Black Myth: Wukong', image: 'images/black-myth-wukong.jpg' },
    { id: 'audition', name: 'Audition', image: 'images/audition.jpg' },
    { id: 'battle-teams-2', name: 'Battle Teams 2', image: 'images/battle-teams-2.jpg' },
    { id: 'crossfire', name: 'CrossFire', image: 'images/crossfire.jpg' },
    { id: 'delta-force', name: 'Delta Force', image: 'images/delta-force.jpg' },
    { id: 'mu-origin', name: 'MU Origin', image: 'images/mu-origin.jpg' }
];

// Utility functions
function debounce(func, wait = 100) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
    };
}

function checkMobile() {
    isMobile = window.innerWidth <= 768 || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    document.body.classList.toggle('is-mobile', isMobile);
    return isMobile;
}

// Function ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i clickable c·ªßa c√°c step
function updateStepStates() {
    const steps = document.querySelectorAll('.step');
    
    steps.forEach((stepEl, index) => {
        const stepNumber = index + 1;
        stepEl.classList.remove('disabled');
        
        // Step 1 lu√¥n clickable
        if (stepNumber === 1) {
            return;
        }
        
        // Step 2 ch·ªâ clickable khi ƒë√£ ch·ªçn budget
        if (stepNumber === 2 && !selectedBudget) {
            stepEl.classList.add('disabled');
            return;
        }
        
        // Step 3 ch·ªâ clickable khi ƒë√£ ch·ªçn budget v√† CPU
        if (stepNumber === 3 && (!selectedBudget || !selectedCPU)) {
            stepEl.classList.add('disabled');
            return;
        }
        
        // Step 4 ch·ªâ clickable khi ƒë√£ ho√†n th√†nh t·∫•t c·∫£
        if (stepNumber === 4 && (!selectedBudget || !selectedCPU || !selectedGame)) {
            stepEl.classList.add('disabled');
            return;
        }
    });
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    // Check if mobile
    checkMobile();
    
    // Handle window resize for responsive adjustments
    window.addEventListener('resize', debounce(checkMobile, 250));
    
    updateBudgetDisplay();
    loadGames();
    updateStepStates();
    console.log('üöÄ Tr∆∞·ªùng Ph√°t Computer PC Builder initialized');
    
    // Register service worker for offline capabilities
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('./service-worker.js')
        .then(reg => console.log('Service Worker registered', reg))
        .catch(err => console.log('Service Worker registration failed', err));
    }
    
    // Setup budget slider with optimized event handling
    const budgetSlider = document.getElementById('budget-slider');
    if (budgetSlider) {
        budgetSlider.addEventListener('input', debounce(function(e) {
            selectedBudget = parseInt(e.target.value);
            updateBudgetDisplay();
            updateStepStates();
        }, 100));
    }
});

function updateBudgetDisplay() {
    const display = document.getElementById('budget-display');
    if (display) {
        display.textContent = selectedBudget + ' tri·ªáu VNƒê';
    }
}

function selectCPU(cpu) {
    selectedCPU = cpu;
    
    // Update UI with minimal animation on mobile
    document.querySelectorAll('.cpu-option').forEach(option => {
        option.classList.remove('selected');
        option.style.transform = '';
    });
    
    const selectedOption = document.querySelector(`[data-cpu="${cpu}"]`);
    if (selectedOption) {
        selectedOption.classList.add('selected');
        
        // Use simpler animation for mobile
        if (!isMobile) {
            selectedOption.style.transform = 'scale(1.05)';
            setTimeout(() => {
                selectedOption.style.transform = '';
            }, 200);
        }
    }
    
    updateStepStates();
    console.log(`‚úÖ CPU selected: ${cpu}`);
    
    // Success message with reduced animations for mobile
    setTimeout(() => {
        showSuccessMessage(`ƒê√£ ch·ªçn ${cpu.toUpperCase()}`, isMobile);
    }, 300);
}

function loadGames() {
    const gameGrid = document.getElementById('game-grid');
    if (!gameGrid) return;
    
    // Use reduced animations for mobile
    if (isMobile) {
        // Simple render without skeletons for mobile
        gameGrid.innerHTML = games.map(game => `
            <div class="game-option" data-game="${game.id}" onclick="selectGame('${game.id}')">
                <img src="${game.image}" alt="${game.name}" class="game-image" loading="lazy"
                     onerror="this.src='images/components/default.jpg'">
                <div class="game-name">${game.name}</div>
            </div>
        `).join('');
    } else {
        // More elaborate loading for desktop
        // Show loading skeleton first
        gameGrid.innerHTML = games.map((game, index) => `
            <div class="game-option skeleton" data-game="${game.id}" style="animation-delay: ${index * 100}ms">
                <div class="game-image skeleton"></div>
                <div class="game-name skeleton"></div>
            </div>
        `).join('');
        
        // Load actual content with animation
        setTimeout(() => {
            gameGrid.innerHTML = games.map((game, index) => `
                <div class="game-option glow" data-game="${game.id}" onclick="selectGame('${game.id}')" 
                     data-tilt data-aos="zoom-in" data-aos-delay="${index * 50}">
                    <img src="${game.image}" alt="${game.name}" class="game-image" loading="lazy"
                         onerror="this.src='images/components/default.jpg'">
                    <div class="game-name">${game.name}</div>
                </div>
            `).join('');
            
            // Re-initialize tilt effect for new elements with mobile optimization
            if (!isMobile && typeof VanillaTilt !== 'undefined') {
                VanillaTilt.init(gameGrid.querySelectorAll("[data-tilt]"), {
                    max: 10,
                    speed: 400,
                    glare: true,
                    "max-glare": 0.1,
                });
            }
            
            // Re-initialize AOS for new elements if available
            if (typeof AOS !== 'undefined') {
                AOS.refresh();
            }
        }, 600);
    }
}

function selectGame(gameId) {
    selectedGame = gameId;
    
    // Update UI with minimal animation on mobile
    document.querySelectorAll('.game-option').forEach(option => {
        option.classList.remove('selected');
        option.style.transform = '';
    });
    
    const selectedOption = document.querySelector(`[data-game="${gameId}"]`);
    if (selectedOption) {
        selectedOption.classList.add('selected');
        
        // Use simpler animation for mobile
        if (!isMobile) {
            selectedOption.style.transform = 'scale(1.1)';
            setTimeout(() => {
                selectedOption.style.transform = '';
            }, 200);
        }
    }
    
    updateStepStates();
    const gameName = games.find(g => g.id === gameId)?.name || gameId;
    console.log(`‚úÖ Game selected: ${gameName}`);
    
    // Success effect with reduced animations for mobile
    setTimeout(() => {
        showSuccessMessage(`ƒê√£ ch·ªçn ${gameName}`, isMobile);
    }, 300);

    // Auto-navigate to next step with slight delay
    setTimeout(() => {
        nextStep();
    }, isMobile ? 500 : 1000);
}

function nextStep() {
    if (currentStep === 2 && !selectedCPU) {
        showErrorMessage('Vui l√≤ng ch·ªçn lo·∫°i CPU!');
        return;
    }
    
    if (currentStep === 3 && !selectedGame) {
        showErrorMessage('Vui l√≤ng ch·ªçn game!');
        return;
    }
    
    if (currentStep === 3) {
        // Show a simple loading indicator
        const configArea = document.getElementById('step-4');
        if (configArea) {
            configArea.innerHTML = '<div class="loading-spinner"></div>';
        }
        
        // Generate configuration with slight delay to allow UI to update
        setTimeout(() => {
            generateConfiguration();
            loadComponentSelectors();
            displayFinalConfiguration();
            
            // Simplified success message for mobile
            if (isMobile) {
                showSuccessMessage('C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫°o!');
            } else {
                // More elaborate message for desktop
                Swal.fire({
                    title: 'üéâ Ho√†n Th√†nh!',
                    html: `
                        <div style="text-align: center;">
                            <div style="font-size: 2rem; margin-bottom: 1rem;">üñ•Ô∏è‚ú®</div>
                            <p style="font-size: 1.2rem; margin-bottom: 1rem;">C·∫•u h√¨nh m√°y t√≠nh ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!</p>
                            <p style="color: #4facfe;">B·∫°n c√≥ th·ªÉ t√πy ch·ªânh th√™m c√°c linh ki·ªán b√™n d∆∞·ªõi</p>
                        </div>
                    `,
                    icon: 'success',
                    background: '#1e293b',
                    color: '#f8fafc',
                    confirmButtonColor: '#4facfe',
                    confirmButtonText: 'Tuy·ªát v·ªùi! üöÄ',
                    timer: 3000,
                    timerProgressBar: true
                });
            }
        }, isMobile ? 300 : 500);
    }
    
    currentStep++;
    showStep(currentStep);
}

function showStep(step) {
    // Hide all steps
    for (let i = 1; i <= 4; i++) {
        const stepEl = document.getElementById(`step-${i}`);
        if (stepEl) {
            stepEl.classList.add('hidden');
        }
    }
    
    // Show current step
    const currentStepEl = document.getElementById(`step-${step}`);
    if (currentStepEl) {
        currentStepEl.classList.remove('hidden');
    }
    
    // Update step indicator
    document.querySelectorAll('.step').forEach((stepEl, index) => {
        if (index + 1 <= step) {
            stepEl.classList.add('active');
        } else {
            stepEl.classList.remove('active');
        }
    });
    
    currentStep = step;
    
    // Load games n·∫øu ƒëang ·ªü step 3
    if (step === 3) {
        loadGames();
    }
    
    // Load component selectors n·∫øu ƒëang ·ªü step 4
    if (step === 4) {
        loadComponentSelectors();
    }
}

// Function ƒë·ªÉ navigate ƒë·∫øn step c·ª• th·ªÉ
function navigateToStep(targetStep) {
    console.log(`üéØ Navigate to step ${targetStep}. Current state: budget=${selectedBudget}, cpu=${selectedCPU}, game=${selectedGame}`);
    
    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë·ªÉ c√≥ th·ªÉ chuy·ªÉn step
    if (targetStep === 1) {
        // Lu√¥n cho ph√©p quay l·∫°i step 1
        console.log('‚úÖ Navigating to step 1');
        showStep(1);
        return;
    }
    
    if (targetStep === 2) {
        // Cho ph√©p ƒë·∫øn step 2 n·∫øu ƒë√£ ch·ªçn budget
        if (selectedBudget) {
            console.log('‚úÖ Navigating to step 2');
            showStep(2);
        } else {
            console.log('‚ùå Cannot navigate to step 2: no budget selected');
            showErrorMessage('‚ö†Ô∏è Vui l√≤ng ch·ªçn ng√¢n s√°ch tr∆∞·ªõc!');
        }
        return;
    }
    
    if (targetStep === 3) {
        // Cho ph√©p ƒë·∫øn step 3 n·∫øu ƒë√£ ch·ªçn budget v√† CPU
        if (selectedBudget && selectedCPU) {
            console.log('‚úÖ Navigating to step 3');
            showStep(3);
        } else {
            console.log('‚ùå Cannot navigate to step 3: missing requirements');
            showErrorMessage('‚ö†Ô∏è Vui l√≤ng ho√†n th√†nh b∆∞·ªõc ch·ªçn ng√¢n s√°ch v√† CPU tr∆∞·ªõc!');
        }
        return;
    }
    
    if (targetStep === 4) {
        // Cho ph√©p ƒë·∫øn step 4 n·∫øu ƒë√£ ho√†n th√†nh c√°c b∆∞·ªõc tr∆∞·ªõc
        if (selectedBudget && selectedCPU && selectedGame) {
            console.log('‚úÖ Navigating to step 4');
            generateConfiguration();
            showStep(4);
        } else {
            console.log('‚ùå Cannot navigate to step 4: missing requirements');
            showErrorMessage('‚ö†Ô∏è Vui l√≤ng ho√†n th√†nh t·∫•t c·∫£ c√°c b∆∞·ªõc tr∆∞·ªõc!');
        }
        return;
    }
}

// Make function available globally for inline onclick
window.navigateToStep = navigateToStep;

function generateConfiguration() {
    const budgetKey = selectedBudget + 'M';
    console.log(`üîç Looking for config: ${selectedCPU} - ${selectedGame} - ${budgetKey}`);
    
    // Debug: Log what configurations are available
    console.log('üîß Available AMD configs:', window.amdConfigs ? Object.keys(window.amdConfigs) : 'None');
    if (window.amdConfigs && window.amdConfigs[selectedGame]) {
        console.log(`üîß Available budgets for ${selectedGame}:`, Object.keys(window.amdConfigs[selectedGame]));
        console.log(`üîß Config for ${budgetKey}:`, window.amdConfigs[selectedGame][budgetKey]);
    }
    
    // Get configuration from loaded data
    let configData = null;
    
    if (selectedCPU === 'intel' && window.intelConfigs && window.intelConfigs[selectedGame]) {
        configData = window.intelConfigs[selectedGame][budgetKey];
        console.log('üîß Intel config found:', configData);
    } else if (selectedCPU === 'amd' && window.amdConfigs && window.amdConfigs[selectedGame]) {
        configData = window.amdConfigs[selectedGame][budgetKey];
        console.log('üîß AMD config found:', configData);
        console.log('üîß AMD config CPU specifically:', configData ? configData.cpu : 'undefined');
        console.log('üîß Complete 15M object:', JSON.stringify(window.amdConfigs[selectedGame]['15M'], null, 2));
    }
    
    if (configData) {
        currentConfig = { ...configData };
        console.log('‚úÖ Configuration loaded:', currentConfig);
    } else {
        console.log('‚ùå No configuration found, looking for closest budget...');
        // Try to find closest budget
        const availableBudgets = getAvailableBudgets();
        console.log('üîß Available budgets:', availableBudgets);
        const closestBudget = findClosestBudget(selectedBudget, availableBudgets);
        console.log('üîß Closest budget:', closestBudget);
        
        if (closestBudget) {
            const closestKey = closestBudget + 'M';
            if (selectedCPU === 'intel' && window.intelConfigs && window.intelConfigs[selectedGame]) {
                configData = window.intelConfigs[selectedGame][closestKey];
            } else if (selectedCPU === 'amd' && window.amdConfigs && window.amdConfigs[selectedGame]) {
                configData = window.amdConfigs[selectedGame][closestKey];
            }
            
            if (configData) {
                currentConfig = { ...configData };
                console.log(`‚úÖ Using closest budget config (${closestBudget}M):`, currentConfig);
            } else {
                currentConfig = generateFallbackConfig();
                console.warn('‚ö†Ô∏è Using fallback configuration');
            }
        } else {
            currentConfig = generateFallbackConfig();
            console.warn('‚ö†Ô∏è Using fallback configuration');
        }
    }
    
    // Kh√¥ng t·ª± ƒë·ªông th√™m HDD v√† Monitor - ƒë·ªÉ user t·ª± ch·ªçn
    console.log('‚öôÔ∏è Configuration ready - HDD and Monitor optional');
    
    console.log('üéØ Final config with all components:', currentConfig);
}

function getAvailableBudgets() {
    const budgets = new Set();
    
    // Collect all available budgets from both Intel and AMD configs
    if (window.intelConfigs && window.intelConfigs[selectedGame]) {
        Object.keys(window.intelConfigs[selectedGame]).forEach(key => {
            const budget = parseInt(key.replace('M', ''));
            budgets.add(budget);
        });
    }
    
    if (window.amdConfigs && window.amdConfigs[selectedGame]) {
        Object.keys(window.amdConfigs[selectedGame]).forEach(key => {
            const budget = parseInt(key.replace('M', ''));
            budgets.add(budget);
        });
    }
    
    return Array.from(budgets).sort((a, b) => a - b);
}

function findClosestBudget(targetBudget, availableBudgets) {
    if (availableBudgets.length === 0) return null;
    
    let closest = availableBudgets[0];
    let minDiff = Math.abs(targetBudget - closest);
    
    for (let budget of availableBudgets) {
        const diff = Math.abs(targetBudget - budget);
        if (diff < minDiff) {
            minDiff = diff;
            closest = budget;
        }
    }
    
    return closest;
}

function generateFallbackConfig() {
    console.log('üîß Generating fallback configuration...');
    
    if (selectedBudget <= 5) {
        return selectedCPU === 'intel' ? {
            cpu: "9100f",
            mainboard: "H310",
            vga: "750ti",
            ram: "D38G",
            ssd: "sata-sstc-256",
            case: "gaming-start-ga3fg",
            cpuCooler: "STOCK",
            psu: "350W"
        } : {
            cpu: "3200g",
            mainboard: "A320",
            vga: "750ti",
            ram: "D38G",
            ssd: "sata-sstc-256",
            case: "gaming-start-ga3fg",
            cpuCooler: "STOCK",
            psu: "350W"
        };
    } else if (selectedBudget <= 10) {
        return selectedCPU === 'intel' ? {
            cpu: "12100f",
            mainboard: "HNZ-H610",
            vga: "1660s",
            ram: "cosair-16",
            ssd: "sstc-256",
            case: "GA",
            cpuCooler: "2ongdong",
            psu: "DT660"
        } : {
            cpu: "5600",
            mainboard: "B450M-A",
            vga: "1660s",
            ram: "cosair-16",
            ssd: "sstc-256",
            case: "GA",
            cpuCooler: "2ongdong",
            psu: "DT660"
        };
    } else if (selectedBudget <= 20) {
        return selectedCPU === 'intel' ? {
            cpu: "13400f",
            mainboard: "HNZ-B760",
            vga: "3070",
            ram: "cosair-16",
            ssd: "crucial-500",
            case: "GA",
            cpuCooler: "CR1000",
            psu: "VSP750"
        } : {
            cpu: "5700x",
            mainboard: "MSI-B550M",
            vga: "3070",
            ram: "cosair-16",
            ssd: "crucial-500",
            case: "GA",
            cpuCooler: "CR1000",
            psu: "VSP750"
        };
    } else {
        return selectedCPU === 'intel' ? {
            cpu: "14600kf",
            mainboard: "B760M-E",
            vga: "4070",
            ram: "cosair-32",
            ssd: "crucial-1tb",
            case: "GA",
            cpuCooler: "TMR120SE",
            psu: "COSAIR850"
        } : {
            cpu: "7600x",
            mainboard: "B650M-E",
            vga: "4070",
            ram: "cosair-32",
            ssd: "crucial-1tb",
            case: "GA",
            cpuCooler: "TMR120SE",
            psu: "COSAIR850"
        };
    }
}

function loadComponentSelectors() {
    const componentGrid = document.getElementById('component-grid');
    if (!componentGrid) return;
    
    const components = ['cpu', 'mainboard', 'vga', 'ram', 'ssd', 'hdd', 'monitor', 'psu', 'case', 'cpuCooler'];
    const componentNames = {
        cpu: 'üíª CPU - B·ªô Vi X·ª≠ L√Ω',
        mainboard: 'üîå Mainboard - Bo M·∫°ch Ch·ªß',
        vga: 'üéÆ VGA - Card ƒê·ªì H·ªça',
        ram: 'üß† RAM - B·ªô Nh·ªõ',
        ssd: 'üíæ SSD - ·ªî C·ª©ng',
        hdd: 'üíΩ HDD - ·ªî C·ª©ng C∆°',
        monitor: 'üñ•Ô∏è Monitor - M√†n H√¨nh',
        psu: '‚ö° PSU - Ngu·ªìn',
        case: 'üè† Case - V·ªè M√°y',
        cpuCooler: 'üå™Ô∏è CPU Cooler - T·∫£n Nhi·ªát'
    };
    
    // Show loading skeleton first
    componentGrid.innerHTML = components.map((component, index) => `
        <div class="component-card skeleton" style="animation-delay: ${index * 50}ms">
            <div class="skeleton" style="height: 1.5rem; margin-bottom: 1rem; border-radius: 0.5rem;"></div>
            <div class="skeleton" style="height: 2.5rem; border-radius: 0.5rem;"></div>
        </div>
    `).join('');
    
    // Load actual content with animation
    setTimeout(() => {
        componentGrid.innerHTML = components.map((component, index) => {
            const options = getComponentOptions(component);
            const isEnabled = isComponentEnabled(component);
            const statusText = getComponentStatus(component);
            
            return `
                <div class="component-card glow ${!isEnabled ? 'disabled' : ''}" 
                     data-tilt data-aos="fade-up" data-aos-delay="${index * 100}"
                     style="position: relative;">
                    <h4 style="color: ${!isEnabled ? '#94a3b8' : '#4facfe'}; margin-bottom: 1rem; font-size: 1.1rem;">${componentNames[component]}</h4>
                    <select class="component-select" id="${component}-select" 
                            onchange="updateComponent('${component}', this.value)"
                            ${!isEnabled ? 'disabled' : ''}
                            style="background: ${!isEnabled ? '#f1f5f9' : '#1e293b'}; color: ${!isEnabled ? '#94a3b8' : 'white'};">
                        ${options}
                    </select>
                    ${statusText ? `<div class="component-status" style="margin-top: 0.5rem; font-size: 0.85rem; color: #64748b; font-style: italic;">${statusText}</div>` : ''}
                    ${!isEnabled ? '<div class="component-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(148, 163, 184, 0.3); border-radius: 0.75rem; pointer-events: none;"></div>' : ''}
                </div>
            `;
        }).join('');
        
        // Set current selections
        components.forEach(component => {
            const select = document.getElementById(`${component}-select`);
            if (select && currentConfig[component]) {
                select.value = currentConfig[component];
            }
        });
        
        // Re-initialize tilt effect for new elements with mobile optimization
        const isMobile = window.innerWidth <= 768 || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        
        if (!isMobile) {
            VanillaTilt.init(componentGrid.querySelectorAll("[data-tilt]"), {
                max: 5,
                speed: 400,
                glare: true,
                "max-glare": 0.1,
            });
        } else {
            // Mobile: no tilt for component cards ƒë·ªÉ tƒÉng performance
            // Ch·ªâ add hover effect ƒë∆°n gi·∫£n
            componentGrid.querySelectorAll("[data-tilt]").forEach(card => {
                card.addEventListener('touchstart', function() {
                    this.style.transform = 'scale(0.98)';
                }, { passive: true });
                
                card.addEventListener('touchend', function() {
                    this.style.transform = 'scale(1)';
                }, { passive: true });
            });
        }
        
        // Re-initialize AOS for new elements
        AOS.refresh();
    }, 600);
}

function isComponentEnabled(componentType) {
    switch(componentType) {
        case 'cpu':
            return true; // CPU lu√¥n ƒë∆∞·ª£c ph√©p ch·ªçn ƒë·∫ßu ti√™n
        case 'mainboard':
            return currentConfig.cpu ? true : false; // C·∫ßn ch·ªçn CPU tr∆∞·ªõc
        case 'ram':
            return currentConfig.mainboard ? true : false; // C·∫ßn ch·ªçn Mainboard tr∆∞·ªõc
        case 'vga':
        case 'ssd':
        case 'hdd':
        case 'monitor':
        case 'psu':
        case 'case':
        case 'cpuCooler':
            return currentConfig.cpu ? true : false; // C·∫ßn ch·ªçn CPU tr∆∞·ªõc
        default:
            return true;
    }
}

function getComponentStatus(componentType) {
    switch(componentType) {
        case 'mainboard':
            return !currentConfig.cpu ? '‚ùå Vui l√≤ng ch·ªçn CPU tr∆∞·ªõc' : '‚úÖ S·∫µn s√†ng ch·ªçn';
        case 'ram':
            return !currentConfig.mainboard ? '‚ùå Vui l√≤ng ch·ªçn Mainboard tr∆∞·ªõc' : '‚úÖ S·∫µn s√†ng ch·ªçn';
        case 'vga':
        case 'ssd':
        case 'hdd':
        case 'monitor':
        case 'psu':
        case 'case':
        case 'cpuCooler':
            return !currentConfig.cpu ? '‚ùå Vui l√≤ng ch·ªçn CPU tr∆∞·ªõc' : '‚úÖ S·∫µn s√†ng ch·ªçn';
        default:
            return '';
    }
}

function getCompatibleOptions(componentType) {
    const dataMap = {
        cpu: window.cpuData,
        mainboard: window.mainboardData,
        vga: window.vgaData,
        ram: window.ramData,
        ssd: window.ssdData,
        hdd: window.hddData,
        monitor: window.monitorData,
        psu: window.psuData,
        case: window.caseData,
        cpuCooler: window.cpuCoolerData
    };
    
    const data = dataMap[componentType];
    if (!data) return {};
    
    // Filter theo compatibility
    switch(componentType) {
        case 'mainboard':
            if (!currentConfig.cpu) return {};
            const cpuData = window.cpuData[currentConfig.cpu];
            if (!cpuData || !cpuData.socket) return data;
            
            return Object.fromEntries(
                Object.entries(data).filter(([id, mainboard]) => 
                    mainboard.sockets && cpuData.socket && 
                    mainboard.sockets.includes(cpuData.socket)
                )
            );
            
        case 'ram':
            if (!currentConfig.mainboard) return {};
            const mainboardData = window.mainboardData[currentConfig.mainboard];
            if (!mainboardData || !mainboardData.memoryType) return data;
            
            return Object.fromEntries(
                Object.entries(data).filter(([id, ram]) =>
                    ram.type && mainboardData.memoryType && 
                    ram.type === mainboardData.memoryType
                )
            );
            
        case 'cpuCooler':
            if (!currentConfig.cpu) return data;
            const cpuDataForCooler = window.cpuData[currentConfig.cpu];
            if (!cpuDataForCooler || !cpuDataForCooler.socket) return data;
            
            return Object.fromEntries(
                Object.entries(data).filter(([id, cooler]) =>
                    !cooler.sockets || cooler.sockets.some(socket => 
                        socket.includes(cpuDataForCooler.socket) || 
                        cpuDataForCooler.socket.includes(socket.replace(/LGA|AM/g, ''))
                    )
                )
            );
            
        default:
            return data;
    }
}

function getComponentOptions(componentType) {
    const compatibleData = getCompatibleOptions(componentType);
    
    if (!compatibleData || Object.keys(compatibleData).length === 0) {
        if (!isComponentEnabled(componentType)) {
            return '<option value="">Vui l√≤ng ch·ªçn linh ki·ªán tr∆∞·ªõc ƒë√≥</option>';
        }
        return '<option value="">Kh√¥ng c√≥ linh ki·ªán t∆∞∆°ng th√≠ch</option>';
    }
    
    const defaultOption = '<option value="">-- Ch·ªçn ' + componentType.toUpperCase() + ' --</option>';
    const options = Object.entries(compatibleData).map(([id, component]) => 
        `<option value="${id}">${component.name}${component.price ? ' - ' + formatPrice(component.price) : ''}</option>`
    ).join('');
    
    return defaultOption + options;
}

function updateComponent(componentType, componentId) {
    if (!componentId) {
        delete currentConfig[componentType];
        console.log(`üóëÔ∏è Removed ${componentType}`);
    } else {
    currentConfig[componentType] = componentId;
    console.log(`üîß Updated ${componentType}: ${componentId}`);
    }
    
    // Reset dependent components
    resetDependentComponents(componentType);
    
    // Reload selectors ƒë·ªÉ update compatibility
    loadComponentSelectors();
    
    // Auto-update display v·ªõi delay ƒë·ªÉ ƒë·∫£m b·∫£o DOM update
    setTimeout(() => {
        displayFinalConfiguration();
    }, 50);
}

function resetDependentComponents(changedComponent) {
    const dependencies = {
        cpu: ['mainboard', 'ram'], // Khi ƒë·ªïi CPU ch·ªâ reset mainboard v√† ram, kh√¥ng reset t·∫£n nhi·ªát
        mainboard: ['ram'] // Khi ƒë·ªïi mainboard th√¨ reset ram
    };
    
    if (dependencies[changedComponent]) {
        dependencies[changedComponent].forEach(dependent => {
            if (currentConfig[dependent]) {
                delete currentConfig[dependent];
                console.log(`üîÑ Reset ${dependent} due to ${changedComponent} change`);
            }
        });
    }
    
    // Ki·ªÉm tra t∆∞∆°ng th√≠ch t·∫£n nhi·ªát v·ªõi CPU m·ªõi
    if (changedComponent === 'cpu' && currentConfig.cpuCooler) {
        const newCpuData = window.cpuData[currentConfig.cpu];
        const coolerData = window.cpuCoolerData[currentConfig.cpuCooler];
        
        if (newCpuData && coolerData && coolerData.sockets) {
            // Ki·ªÉm tra xem t·∫£n nhi·ªát c√≥ t∆∞∆°ng th√≠ch v·ªõi CPU m·ªõi kh√¥ng
            const isCompatible = coolerData.sockets.some(socket => 
                socket.includes(newCpuData.socket) || 
                newCpuData.socket.includes(socket.replace(/LGA|AM/g, ''))
            );
            
            if (!isCompatible) {
                delete currentConfig.cpuCooler;
                console.log(`üîÑ Reset cpuCooler due to socket incompatibility`);
            } else {
                console.log(`‚úÖ CPU Cooler ${currentConfig.cpuCooler} is compatible with new CPU`);
            }
        }
    }
}

function formatPrice(price) {
    if (!price || price === 0) return '0 VNƒê';
    return new Intl.NumberFormat('vi-VN').format(price) + ' VNƒê';
}

// Function t√≠nh t·ªïng gi√°
function getTotalPrice() {
    let total = 0;
    
    if (currentConfig.cpu) {
        // cpuData l√† object, kh√¥ng ph·∫£i array
        const cpu = window.cpuData[currentConfig.cpu] || Object.values(window.cpuData).find(item => item.name === currentConfig.cpu);
        if (cpu) total += cpu.price;
    }
    
    if (currentConfig.mainboard) {
        const mainboard = window.mainboardData[currentConfig.mainboard] || Object.values(window.mainboardData).find(item => item.name === currentConfig.mainboard);
        if (mainboard) total += mainboard.price;
    }
    
    if (currentConfig.ram) {
        const ram = window.ramData[currentConfig.ram] || Object.values(window.ramData).find(item => item.name === currentConfig.ram);
        if (ram) total += ram.price;
    }
    
    if (currentConfig.ssd) {
        const ssd = window.ssdData[currentConfig.ssd] || Object.values(window.ssdData).find(item => item.name === currentConfig.ssd);
        if (ssd) total += ssd.price;
    }
    
    if (currentConfig.vga) {
        const vga = window.vgaData[currentConfig.vga] || Object.values(window.vgaData).find(item => item.name === currentConfig.vga);
        if (vga) total += vga.price;
    }
    
    if (currentConfig.case) {
        const caseItem = window.caseData[currentConfig.case] || Object.values(window.caseData).find(item => item.name === currentConfig.case);
        if (caseItem) total += caseItem.price;
    }
    
    if (currentConfig.cpuCooler) {
        const cooler = window.cpuCoolerData[currentConfig.cpuCooler] || Object.values(window.cpuCoolerData).find(item => item.name === currentConfig.cpuCooler);
        if (cooler) total += cooler.price;
    }
    
    if (currentConfig.psu) {
        const psu = window.psuData[currentConfig.psu] || Object.values(window.psuData).find(item => item.name === currentConfig.psu);
        if (psu) total += psu.price;
    }
    
    if (currentConfig.hdd) {
        const hdd = window.hddData[currentConfig.hdd] || Object.values(window.hddData).find(item => item.name === currentConfig.hdd);
        if (hdd) total += hdd.price;
    }
    
    if (currentConfig.monitor) {
        const monitor = window.monitorData[currentConfig.monitor] || Object.values(window.monitorData).find(item => item.name === currentConfig.monitor);
        if (monitor) total += monitor.price;
    }
    
    return total;
}

function displayFinalConfiguration() {
    const total = getTotalPrice();
    const dateString = new Date().toLocaleDateString('vi-VN', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
    
    let tableHTML = `
        ${mainPageStyles}
        <div style="text-align: center; background: linear-gradient(135deg, #dc2626, #b91c1c); color: white; padding: 1.5rem; border-radius: 1rem; margin-bottom: 1.5rem; box-shadow: 0 10px 25px rgba(220, 38, 38, 0.3);">
            <h1 style="margin: 0; font-size: 1.5rem; font-weight: bold;">TR∆Ø·ªúNG PH√ÅT COMPUTER XIN G·ª¨I B·∫¢NG CHI TI·∫æT C·∫§U H√åNH M√ÅY T√çNH</h1>
            <p style="margin: 0.5rem 0 0 0; font-size: 1rem; opacity: 0.9;">${dateString}</p>
            <div style="margin-top: 1rem; display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap;">
                <button onclick="saveImageHD()" style="background: #22c55e; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 0.5rem; font-weight: bold; cursor: pointer; font-size: 1rem;">
                    üì∏ L∆∞u ·∫¢nh HD
                </button>
                <button onclick="printConfiguration()" style="background: #3b82f6; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 0.5rem; font-weight: bold; cursor: pointer; font-size: 1rem;">
                    üñ®Ô∏è In C·∫•u H√¨nh
                </button>
        </div>
        </div>
        
        <table class="config-table" style="width: 100%; border-collapse: collapse; margin-bottom: 1.5rem; box-shadow: 0 10px 25px rgba(0,0,0,0.1); border-radius: 1rem; overflow: hidden;">
            <thead>
                <tr>
                    <th style="padding: 0.65rem; text-align: center; font-weight: bold; font-size: 0.65rem;">STT</th>
                    <th style="padding: 0.65rem; text-align: center; font-weight: bold; font-size: 0.65rem;">H√åNH ·∫¢NH</th>
                    <th style="padding: 0.65rem; text-align: center; font-weight: bold; font-size: 0.65rem;">T√äN, M√É, LO·∫†I LINH KI·ªÜN</th>
                    <th style="padding: 0.65rem; text-align: center; font-weight: bold; font-size: 0.65rem;">ƒêVT</th>
                    <th style="padding: 0.65rem; text-align: center; font-weight: bold; font-size: 0.65rem;">S·ªê L∆Ø·ª¢NG</th>
                    <th style="padding: 0.65rem; text-align: center; font-weight: bold; font-size: 0.65rem;">ƒê∆†N GI√Å</th>
                    <th style="padding: 0.65rem; text-align: center; font-weight: bold; font-size: 0.65rem;">TH√ÄNH TI·ªÄN</th>
                    <th style="padding: 0.65rem; text-align: center; font-weight: bold; font-size: 0.65rem;">B·∫¢O H√ÄNH</th>
                    <th style="padding: 0.65rem; text-align: center; font-weight: bold; font-size: 0.65rem;">GHI CH√ö</th>
                </tr>
            </thead>
            <tbody>`;
    
    let stt = 1;

    // Th√™m t·ª´ng component v√†o b·∫£ng
    if (currentConfig.cpu) {
        const cpu = window.cpuData[currentConfig.cpu] || Object.values(window.cpuData).find(item => item.name === currentConfig.cpu);
        if (cpu) {
            tableHTML += `
                <tr style="border-bottom: 1px solid #e5e7eb;">
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                    <td style="padding: 1rem; text-align: center;"><img src="${cpu.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                    <td style="padding: 1rem; text-align: left; font-weight: 500;">
                        <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">CPU</div>
                        <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${cpu.name}</div>
                        <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${cpu.brand}</div>
                    </td>
                    <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(cpu.price)}</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(cpu.price)}</td>
                    <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${cpu.warranty || '36 th√°ng'}</td>
                    <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${cpu.condition || 'NEW'}</td>
                </tr>`;
        }
    }

    if (currentConfig.mainboard) {
        const mainboard = window.mainboardData[currentConfig.mainboard] || Object.values(window.mainboardData).find(item => item.name === currentConfig.mainboard);
        if (mainboard) {
            tableHTML += `
                <tr style="border-bottom: 1px solid #e5e7eb;">
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                    <td style="padding: 1rem; text-align: center;"><img src="${mainboard.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                    <td style="padding: 1rem; text-align: left; font-weight: 500;">
                        <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">Mainboard</div>
                        <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${mainboard.name}</div>
                        <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${mainboard.brand}</div>
            </td>
                    <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(mainboard.price)}</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(mainboard.price)}</td>
                    <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${mainboard.warranty || '36 th√°ng'}</td>
                    <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${mainboard.condition || 'NEW'}</td>
                </tr>`;
        }
    }

    if (currentConfig.ram) {
        const ram = window.ramData[currentConfig.ram] || Object.values(window.ramData).find(item => item.name === currentConfig.ram);
        if (ram) {
            tableHTML += `
                <tr style="border-bottom: 1px solid #e5e7eb;">
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                    <td style="padding: 1rem; text-align: center;"><img src="${ram.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                    <td style="padding: 1rem; text-align: left; font-weight: 500;">
                        <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">RAM</div>
                        <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${ram.name}</div>
                        <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${ram.brand}</div>
            </td>
                    <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(ram.price)}</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(ram.price)}</td>
                    <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${ram.warranty || '36 th√°ng'}</td>
                    <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${ram.condition || 'NEW'}</td>
        </tr>`;
        }
    }

    if (currentConfig.ssd) {
        const ssd = window.ssdData[currentConfig.ssd] || Object.values(window.ssdData).find(item => item.name === currentConfig.ssd);
        if (ssd) {
            tableHTML += `
                <tr style="border-bottom: 1px solid #e5e7eb;">
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                    <td style="padding: 1rem; text-align: center;"><img src="${ssd.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                    <td style="padding: 1rem; text-align: left; font-weight: 500;">
                        <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">SSD</div>
                        <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${ssd.name}</div>
                        <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${ssd.brand}</div>
                    </td>
                    <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(ssd.price)}</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(ssd.price)}</td>
                    <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${ssd.warranty || '36 th√°ng'}</td>
                    <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${ssd.condition || 'NEW'}</td>
        </tr>`;
        }
    }

    if (currentConfig.vga) {
        const vga = window.vgaData[currentConfig.vga] || Object.values(window.vgaData).find(item => item.name === currentConfig.vga);
        if (vga) {
            tableHTML += `
                <tr style="border-bottom: 1px solid #e5e7eb;">
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                    <td style="padding: 1rem; text-align: center;"><img src="${vga.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                    <td style="padding: 1rem; text-align: left; font-weight: 500;">
                        <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">VGA</div>
                        <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${vga.name}</div>
                        <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${vga.brand}</div>
                    </td>
                    <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(vga.price)}</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(vga.price)}</td>
                    <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${vga.warranty || '36 th√°ng'}</td>
                    <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${vga.condition || 'NEW'}</td>
                </tr>`;
        }
    }

    if (currentConfig.case) {
        const caseItem = window.caseData[currentConfig.case] || Object.values(window.caseData).find(item => item.name === currentConfig.case);
        if (caseItem) {
            tableHTML += `
                <tr style="border-bottom: 1px solid #e5e7eb;">
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                    <td style="padding: 1rem; text-align: center;"><img src="${caseItem.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                    <td style="padding: 1rem; text-align: left; font-weight: 500;">
                        <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">Case</div>
                        <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${caseItem.name}</div>
                        <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${caseItem.brand}</div>
                    </td>
                    <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(caseItem.price)}</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(caseItem.price)}</td>
                    <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${caseItem.warranty || '12 th√°ng'}</td>
                    <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${caseItem.condition || 'NEW'}</td>
                </tr>`;
        }
    }

    if (currentConfig.cpuCooler) {
        const cooler = window.cpuCoolerData[currentConfig.cpuCooler] || Object.values(window.cpuCoolerData).find(item => item.name === currentConfig.cpuCooler);
        if (cooler) {
            tableHTML += `
                <tr style="border-bottom: 1px solid #e5e7eb;">
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                    <td style="padding: 1rem; text-align: center;"><img src="${cooler.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                    <td style="padding: 1rem; text-align: left; font-weight: 500;">
                        <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">T·∫£n Nhi·ªát CPU</div>
                        <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${cooler.name}</div>
                        <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${cooler.brand}</div>
                    </td>
                    <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(cooler.price)}</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(cooler.price)}</td>
                    <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${cooler.warranty || '12 th√°ng'}</td>
                    <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${cooler.condition || 'NEW'}</td>
                </tr>`;
        }
    }

    if (currentConfig.psu) {
        const psu = window.psuData[currentConfig.psu] || Object.values(window.psuData).find(item => item.name === currentConfig.psu);
        if (psu) {
            tableHTML += `
                <tr style="border-bottom: 1px solid #e5e7eb;">
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                    <td style="padding: 1rem; text-align: center;"><img src="${psu.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                    <td style="padding: 1rem; text-align: left; font-weight: 500;">
                        <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">Ngu·ªìn</div>
                        <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${psu.name}</div>
                        <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${psu.brand}</div>
                    </td>
                    <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(psu.price)}</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(psu.price)}</td>
                    <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${psu.warranty || '36 th√°ng'}</td>
                    <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${psu.condition || 'NEW'}</td>
                </tr>`;
        }
    }

    if (currentConfig.hdd) {
        const hdd = window.hddData[currentConfig.hdd] || Object.values(window.hddData).find(item => item.name === currentConfig.hdd);
        if (hdd) {
            tableHTML += `
                <tr style="border-bottom: 1px solid #e5e7eb;">
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                    <td style="padding: 1rem; text-align: center;"><img src="${hdd.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                    <td style="padding: 1rem; text-align: left; font-weight: 500;">
                        <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">HDD</div>
                        <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${hdd.name}</div>
                        <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${hdd.brand}</div>
                    </td>
                    <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(hdd.price)}</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(hdd.price)}</td>
                    <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${hdd.warranty || '36 th√°ng'}</td>
                    <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${hdd.condition || 'NEW'}</td>
                </tr>`;
        }
    }

    if (currentConfig.monitor) {
        const monitor = window.monitorData[currentConfig.monitor] || Object.values(window.monitorData).find(item => item.name === currentConfig.monitor);
        if (monitor) {
            tableHTML += `
                <tr style="border-bottom: 1px solid #e5e7eb;">
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                    <td style="padding: 1rem; text-align: center;"><img src="${monitor.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                    <td style="padding: 1rem; text-align: left; font-weight: 500;">
                        <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">Monitor</div>
                        <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${monitor.name}</div>
                        <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${monitor.brand}</div>
                    </td>
                    <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(monitor.price)}</td>
                    <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(monitor.price)}</td>
                    <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${monitor.warranty || '36 th√°ng'}</td>
                    <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${monitor.condition || 'NEW'}</td>
                </tr>`;
        }
    }

    // D√≤ng t·ªïng c·ªông - QUAN TR·ªåNG
    tableHTML += `
            <tr id="total-row" class="total-row-display" style="background: linear-gradient(135deg, #059669, #10b981); color: white; font-weight: bold; border: 3px solid #047857;">
                <td colspan="6" style="padding: 1.5rem; text-align: center; font-size: 1.2rem; text-transform: uppercase; letter-spacing: 1px; font-weight: 900;">T·ªîNG C·ªòNG</td>
                <td style="padding: 1.5rem; text-align: center; font-size: 1.3rem; font-weight: 900; color: #fbbf24;">
                    <div style="display: flex; align-items: center; justify-content: center; gap: 0.5rem;">
                        <span>${new Intl.NumberFormat('vi-VN').format(total)}</span>
                        <span style="font-size: 1.1rem;">VNƒê</span>
                    </div>
                </td>
                <td colspan="2" style="padding: 1.5rem; text-align: center; font-size: 0.9rem; color: #fbbf24; font-weight: bold;"></td>
        </tr>
        </tbody>
    </table>`;

    document.getElementById('final-config-table').innerHTML = tableHTML;
    
    // ƒê·∫£m b·∫£o hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß HDD v√† Monitor ngay sau khi t·∫°o b·∫£ng
    setTimeout(() => {
        const table = document.querySelector('#final-config-table table tbody');
        if (table && currentConfig) {
            let hasHDD = false;
            let hasMonitor = false;
            
            // Ki·ªÉm tra xem ƒë√£ c√≥ HDD v√† Monitor ch∆∞a
            const rows = table.querySelectorAll('tr:not(#total-row):not(.total-row-display)');
            rows.forEach(row => {
                const text = row.textContent;
                if (text.includes('HDD')) hasHDD = true;
                if (text.includes('Monitor')) hasMonitor = true;
            });
            
            let stt = rows.length + 1;
            
            // N·∫øu thi·∫øu HDD, th√™m v√†o
            if (!hasHDD && currentConfig.hdd) {
                const hdd = getComponentData('hdd', currentConfig.hdd);
                if (hdd) {
                    const hddRow = document.createElement('tr');
                    hddRow.style.borderBottom = '1px solid #e5e7eb';
                    hddRow.innerHTML = `
                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                        <td style="padding: 1rem; text-align: center;"><img src="${hdd.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                        <td style="padding: 1rem; text-align: left; font-weight: 500;">
                                                         <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">HDD</div>
                             <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${hdd.name}</div>
                             <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${hdd.brand}</div>
                        </td>
                        <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(hdd.price)}</td>
                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(hdd.price)}</td>
                        <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${hdd.warranty || '36 th√°ng'}</td>
                        <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${hdd.condition || 'NEW'}</td>
                    `;
                    
                    // Th√™m tr∆∞·ªõc d√≤ng t·ªïng c·ªông
                    const totalRow = table.querySelector('#total-row, .total-row-display');
                    if (totalRow) {
                        table.insertBefore(hddRow, totalRow);
                    } else {
                        table.appendChild(hddRow);
                    }
                }
            }
            
            // N·∫øu thi·∫øu Monitor, th√™m v√†o
            if (!hasMonitor && currentConfig.monitor) {
                const monitor = getComponentData('monitor', currentConfig.monitor);
                if (monitor) {
                    const monitorRow = document.createElement('tr');
                    monitorRow.style.borderBottom = '1px solid #e5e7eb';
                    monitorRow.innerHTML = `
                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                        <td style="padding: 1rem; text-align: center;"><img src="${monitor.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                        <td style="padding: 1rem; text-align: left; font-weight: 500;">
                                                         <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">Monitor</div>
                             <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${monitor.name}</div>
                             <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${monitor.brand}</div>
                        </td>
                        <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(monitor.price)}</td>
                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(monitor.price)}</td>
                        <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${monitor.warranty || '36 th√°ng'}</td>
                        <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${monitor.condition || 'NEW'}</td>
                    `;
                    
                    // Th√™m tr∆∞·ªõc d√≤ng t·ªïng c·ªông
                    const totalRow = table.querySelector('#total-row, .total-row-display');
                    if (totalRow) {
                        table.insertBefore(monitorRow, totalRow);
                    } else {
                        table.appendChild(monitorRow);
                    }
                }
            }
            
            // C·∫≠p nh·∫≠t l·∫°i t·ªïng c·ªông
            const updatedTotal = getTotalPrice();
            const totalRows = table.querySelectorAll('#total-row, .total-row-display');
            totalRows.forEach(row => {
                const totalCell = row.querySelector('td:nth-child(7)');
                if (totalCell) {
                    totalCell.innerHTML = `
                        <div style="text-align: center; line-height: 1.2; padding: 0.3rem; background: linear-gradient(135deg, #fbbf24, #f59e0b); border-radius: 0.5rem; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                            <span style="font-size: 1.8rem; font-weight: 900; color: #92400e; text-shadow: 0 1px 2px rgba(255,255,255,0.8);">${new Intl.NumberFormat('vi-VN').format(updatedTotal)}</span><span style="font-size: 1.3rem; font-weight: 700; color: #78350f; margin-left: 0.2rem; text-shadow: 0 1px 2px rgba(255,255,255,0.8);">VNƒê</span>
                        </div>
                    `;
                }
            });
        }
    }, 200);
    
    // Th√™m ph·∫ßn li√™n h·ªá sau component selector
    addContactSectionAfterComponents();
}

function addContactSectionAfterComponents() {
    const componentSelector = document.querySelector('.component-selector');
    if (!componentSelector) return;
    
    // X√≥a contact section c≈© n·∫øu c√≥
    const existingContact = document.querySelector('.contact-section-bottom');
    if (existingContact) {
        existingContact.remove();
    }
    
    const contactHTML = `
    <div class="contact-section-bottom" style="background: linear-gradient(135deg, #4facfe, #00f2fe); border-radius: 1rem; padding: 1rem; margin-top: 2rem; box-shadow: 0 10px 25px rgba(79, 172, 254, 0.3);">
        <div style="text-align: center; margin-bottom: 0.75rem; font-weight: bold; color: white; font-size: 1rem;">üìû Li√™n H·ªá Tr∆∞·ªùng Ph√°t Computer H√≤a B√¨nh</div>
        <div class="contact-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 0.5rem; margin-bottom: 0.75rem;">
            <div class="contact-item" style="padding: 0.5rem; border: 1px solid rgba(255,255,255,0.3); border-radius: 0.5rem; text-align: center; background: rgba(255,255,255,0.1); backdrop-filter: blur(10px);">
                <a href="tel:0836768597" style="text-decoration: none; color: white;">
                    <strong style="display: block; font-size: 0.8rem;">üì± Hotline</strong>
                    <span style="font-size: 0.8rem;">0836.768.597</span>
                </a>
            </div>
            <div class="contact-item" style="padding: 0.5rem; border: 1px solid rgba(255,255,255,0.3); border-radius: 0.5rem; text-align: center; background: rgba(255,255,255,0.1); backdrop-filter: blur(10px);">
                <a href="https://zalo.me/0836768597" target="_blank" style="text-decoration: none; color: white;">
                    <strong style="display: block; font-size: 0.8rem;">üí¨ Zalo</strong>
                    <span style="font-size: 0.8rem;">0836.768.597</span>
                </a>
            </div>
            <div class="contact-item" style="padding: 0.5rem; border: 1px solid rgba(255,255,255,0.3); border-radius: 0.5rem; text-align: center; background: rgba(255,255,255,0.1); backdrop-filter: blur(10px);">
                <a href="https://www.facebook.com/tpcom.hb/" target="_blank" style="text-decoration: none; color: white;">
                    <strong style="display: block; font-size: 0.8rem;">üìò Facebook</strong>
                    <span style="font-size: 0.8rem;">Tr∆∞·ªùng Ph√°t Computer H√≤a B√¨nh</span>
                </a>
        </div>
            <div class="contact-item" style="padding: 0.5rem; border: 1px solid rgba(255,255,255,0.3); border-radius: 0.5rem; text-align: center; background: rgba(255,255,255,0.1); backdrop-filter: blur(10px);">
                <a href="https://m.me/tpcom.hb" target="_blank" style="text-decoration: none; color: white;">
                    <strong style="display: block; font-size: 0.8rem;">üí¨ Messenger</strong>
                    <span style="font-size: 0.8rem;">Chat tr·ª±c ti·∫øp</span>
                </a>
            </div>
        </div>
        <div style="text-align: center; font-size: 0.8rem; color: rgba(255,255,255,0.9); font-weight: 500;">
            üéØ ${selectedCPU?.toUpperCase()} | üéÆ ${games.find(g => g.id === selectedGame)?.name} | üí∞ ${selectedBudget}M VNƒê - Cam k·∫øt ch·∫•t l∆∞·ª£ng
        </div>
    </div>`;
    
    componentSelector.insertAdjacentHTML('afterend', contactHTML);
}

function getComponentData(type, id) {
    const dataMap = {
        cpu: window.cpuData,
        mainboard: window.mainboardData,
        vga: window.vgaData,
        ram: window.ramData,
        ssd: window.ssdData,
        psu: window.psuData,
        case: window.caseData,
        cpuCooler: window.cpuCoolerData,
        hdd: window.hddData,
        monitor: window.monitorData
    };
    
    const data = dataMap[type];
    if (data && data[id]) {
        return data[id];
    }
    
    // Try to find by name if direct ID lookup fails
    if (data) {
        const foundByName = Object.values(data).find(item => 
            item.name === id || 
            item.name.toLowerCase().includes(id.toLowerCase()) ||
            id.toLowerCase().includes(item.name.toLowerCase())
        );
        if (foundByName) {
            return foundByName;
        }
    }
    
    // Fallback with proper name formatting
    const fallbackName = id.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    const fallbackImage = type === 'cpuCooler' ? 'images/components/cooler.jpg' : `images/components/${type}.jpg`;
    
    return {
        name: fallbackName,
        price: 1000000,
        image: fallbackImage,
        brand: 'Generic',
        warranty: '12T',
        condition: 'NEW'
    };
}

// Function l∆∞u ·∫£nh HD - ƒë·∫£m b·∫£o c√≥ ƒë·∫ßy ƒë·ªß t·ªïng c·ªông v√† contact info
function saveImageHD() {
    const element = document.getElementById('final-config-table');
    if (!element) {
                    showErrorMessage('‚ùå Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh ƒë·ªÉ l∆∞u!');
        return;
    }

    // ·∫®n buttons v√† header khi save ·∫£nh
    const headerWithButtons = element.querySelector('div[style*="background: linear-gradient(135deg, #dc2626, #b91c1c)"]');
    
    // T√¨m v√† ·∫©n t·∫•t c·∫£ c√°c button trong element
    const allButtons = element.querySelectorAll('button');
    const buttonContainers = element.querySelectorAll('div[style*="display: flex; justify-content: center; gap: 1rem"]');
    
    // ·∫®n t·ª´ng button ri√™ng l·∫ª
    allButtons.forEach(btn => {
        btn.style.display = 'none';
        btn.style.visibility = 'hidden';
        btn.style.opacity = '0';
    });
    
    // ·∫®n container ch·ª©a buttons
    buttonContainers.forEach(container => {
        container.style.display = 'none';
        container.style.visibility = 'hidden';
    });
    
    // ·∫®n c·∫£ header c√≥ ch·ª©a buttons
    if (headerWithButtons) {
        headerWithButtons.style.display = 'none';
    }
    
    // ƒê·∫£m b·∫£o c√≥ ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ components trong ·∫£nh l∆∞u - refresh to√†n b·ªô
    // X√≥a t·∫•t c·∫£ v√† t·∫°o l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·∫ßy ƒë·ªß
    const tableContainer = element.querySelector('table');
    if (tableContainer && currentConfig) {
        // Force refresh l·∫°i to√†n b·ªô b·∫£ng v·ªõi t·∫•t c·∫£ components
        displayFinalConfiguration();
        
        // ƒê·ª£i DOM update xong
        setTimeout(() => {
            const updatedTable = element.querySelector('table tbody');
            if (updatedTable) {
                // ƒê·∫£m b·∫£o c√≥ t·∫•t c·∫£ 10+ components
                let componentCount = 0;
                const rows = updatedTable.querySelectorAll('tr:not(#total-row):not(.total-row-display)');
                componentCount = rows.length;
                
                console.log(`üìä Component count in save image: ${componentCount}`);
                
                // N·∫øu v·∫´n thi·∫øu components, th√™m th·ªß c√¥ng
                if (componentCount < 9) { // √çt nh·∫•t 9 components ch√≠nh
                    const components = ['cpu', 'mainboard', 'ram', 'ssd', 'vga', 'case', 'cpuCooler', 'psu', 'hdd', 'monitor'];
                    let stt = componentCount + 1;
                    
                    components.forEach(compType => {
                        if (currentConfig[compType]) {
                            // Ki·ªÉm tra xem component n√†y ƒë√£ c√≥ trong b·∫£ng ch∆∞a
                            let exists = false;
                            rows.forEach(row => {
                                const text = row.textContent.toLowerCase();
                                if ((compType === 'cpu' && text.includes('cpu')) ||
                                    (compType === 'mainboard' && text.includes('mainboard')) ||
                                    (compType === 'ram' && text.includes('ram')) ||
                                    (compType === 'ssd' && text.includes('ssd')) ||
                                    (compType === 'vga' && text.includes('vga')) ||
                                    (compType === 'case' && text.includes('case')) ||
                                    (compType === 'cpuCooler' && (text.includes('t·∫£n nhi·ªát') || text.includes('cooler'))) ||
                                    (compType === 'psu' && text.includes('ngu·ªìn')) ||
                                    (compType === 'hdd' && text.includes('hdd')) ||
                                    (compType === 'monitor' && text.includes('monitor'))) {
                                    exists = true;
                                }
                            });
                            
                            if (!exists) {
                                const compData = getComponentData(compType, currentConfig[compType]);
                                if (compData) {
                                    const newRow = document.createElement('tr');
                                    newRow.style.borderBottom = '1px solid #e5e7eb';
                                    
                                    const displayName = compType === 'cpuCooler' ? 'T·∫£n Nhi·ªát CPU' : 
                                                      compType === 'psu' ? 'Ngu·ªìn' :
                                                      compType === 'mainboard' ? 'Mainboard' :
                                                      compType.toUpperCase();
                                    
                                    newRow.innerHTML = `
                                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${stt++}</td>
                                        <td style="padding: 1rem; text-align: center;"><img src="${compData.image}" style="width: 45px; height: 45px; object-fit: cover; border-radius: 0.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"/></td>
                                        <td style="padding: 1rem; text-align: left; font-weight: 500;">
                                                                     <div style="font-weight: bold; color: #ffffff; margin-bottom: 0.25rem; font-size: 1.1rem;">${displayName}</div>
                         <div style="color: #ffffff; font-size: 1rem; font-weight: 600;">${compData.name}</div>
                         <div style="font-size: 0.9rem; color: #e5e7eb; font-weight: 500;">Th∆∞∆°ng hi·ªáu: ${compData.brand}</div>
                                        </td>
                                        <td style="padding: 1rem; text-align: center; color: #ef4444; font-weight: bold;">Chi·∫øc</td>
                                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">1</td>
                                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #dc2626;">${formatPrice(compData.price)}</td>
                                        <td style="padding: 1rem; text-align: center; font-weight: bold; color: #059669;">${formatPrice(compData.price)}</td>
                                        <td style="padding: 1rem; text-align: center; color: #84cc16; font-weight: bold;">${compData.warranty || '36 th√°ng'}</td>
                                        <td style="padding: 1rem; text-align: center; color: #10b981; font-weight: bold;">${compData.condition || 'NEW'}</td>
                                    `;
                                    
                                    // Th√™m tr∆∞·ªõc d√≤ng t·ªïng c·ªông
                                    const totalRow = updatedTable.querySelector('#total-row, .total-row-display');
                                    if (totalRow) {
                                        updatedTable.insertBefore(newRow, totalRow);
                                    } else {
                                        updatedTable.appendChild(newRow);
                                    }
                                }
                            }
                        }
                    });
                                 }
             }
         }, 300);
    }
    
    // C·∫≠p nh·∫≠t l·∫°i t·ªïng c·ªông sau khi th√™m HDD/Monitor
    const updatedTotal = getTotalPrice();
    const totalRows = element.querySelectorAll('tr[style*="background: linear-gradient(135deg, #059669, #10b981)"], .total-row-display');
    totalRows.forEach(row => {
        row.classList.add('total-row-display');
        row.style.cssText = 'background: linear-gradient(135deg, #059669, #10b981) !important; color: white !important; font-weight: bold; border: 3px solid #047857 !important;';
        
        // C·∫≠p nh·∫≠t gi√° t·ªïng c·ªông
        const totalCell = row.querySelector('td:nth-child(7)');
        if (totalCell) {
            totalCell.innerHTML = `
                <div style="text-align: center; line-height: 1.2; padding: 0.3rem; background: linear-gradient(135deg, #fbbf24, #f59e0b); border-radius: 0.5rem; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                    <span style="font-size: 1.8rem; font-weight: 900; color: #92400e; text-shadow: 0 1px 2px rgba(255,255,255,0.8);">${new Intl.NumberFormat('vi-VN').format(updatedTotal)}</span><span style="font-size: 1.3rem; font-weight: 700; color: #78350f; margin-left: 0.2rem; text-shadow: 0 1px 2px rgba(255,255,255,0.8);">VNƒê</span>
                </div>
            `;
        }
    });
    
    // Th√™m contact info ngay d∆∞·ªõi b·∫£ng t·ªïng c·ªông
    const tableElement = element.querySelector('table');
    if (tableElement) {
        const contactInfo = document.createElement('div');
        contactInfo.className = 'temp-contact-info';
        
        // L·∫•y th√¥ng tin game v√† CPU ƒë·ªÉ hi·ªÉn th·ªã
        const currentGame = games.find(g => g.id === selectedGame);
        const gameName = currentGame ? currentGame.name : 'Ch∆°i Game';
        const cpuType = selectedCPU ? selectedCPU.toUpperCase() : 'AMD/Intel';
        const budget = selectedBudget ? selectedBudget : '15';
        
        contactInfo.innerHTML = `
            <div style="margin-top: 1rem; padding: 1.5rem; background: linear-gradient(135deg, #4facfe, #00f2fe); border-radius: 1rem; box-shadow: 0 10px 25px rgba(79, 172, 254, 0.3);">
                <div style="text-align: center; margin-bottom: 1rem; font-weight: bold; color: white; font-size: 1.2rem;">üìû Li√™n H·ªá Tr∆∞·ªùng Ph√°t Computer H√≤a B√¨nh</div>
                <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; margin-bottom: 1rem;">
                    <div style="text-align: center; color: white; padding: 0.75rem; background: rgba(255,255,255,0.15); border-radius: 0.75rem; border: 2px solid rgba(255,255,255,0.2);">
                        <strong style="display: block; font-size: 1.1rem; margin-bottom: 0.5rem;">üì± Hotline</strong>
                        <span style="font-size: 1.05rem; font-weight: 700;">0836.768.597</span>
                    </div>
                    <div style="text-align: center; color: white; padding: 0.75rem; background: rgba(255,255,255,0.15); border-radius: 0.75rem; border: 2px solid rgba(255,255,255,0.2);">
                        <strong style="display: block; font-size: 1.1rem; margin-bottom: 0.5rem;">üí¨ Zalo</strong>
                        <span style="font-size: 1.05rem; font-weight: 700;">0836.768.597</span>
                    </div>
                    <div style="text-align: center; color: white; padding: 0.75rem; background: rgba(255,255,255,0.15); border-radius: 0.75rem; border: 2px solid rgba(255,255,255,0.2);">
                        <strong style="display: block; font-size: 1.1rem; margin-bottom: 0.5rem;">üìò Facebook</strong>
                        <span style="font-size: 1.05rem; font-weight: 700;">Tr∆∞·ªùng Ph√°t Computer H√≤a B√¨nh</span>
                    </div>
                    <div style="text-align: center; color: white; padding: 0.75rem; background: rgba(255,255,255,0.15); border-radius: 0.75rem; border: 2px solid rgba(255,255,255,0.2);">
                        <strong style="display: block; font-size: 1.1rem; margin-bottom: 0.5rem;">üí¨ Messenger</strong>
                        <span style="font-size: 1.05rem; font-weight: 700;">Chat tr·ª±c ti·∫øp</span>
                    </div>
                </div>
                <div style="text-align: center; padding: 1rem; background: rgba(255,255,255,0.2); border-radius: 0.75rem; border: 2px solid rgba(255,255,255,0.25);">
                    <div style="font-size: 1.15rem; color: white; font-weight: 700; text-shadow: 0 1px 2px rgba(0,0,0,0.3);">
                        üéØ ${cpuType} | üéÆ ${gameName} | üí∞ ${budget}M VNƒê - Cam k·∫øt ch·∫•t l∆∞·ª£ng
                    </div>
                </div>
            </div>
        `;
        tableElement.parentNode.insertBefore(contactInfo, tableElement.nextSibling);
    }

    // ƒê·ª£i l√¢u h∆°n ƒë·ªÉ DOM update ho√†n to√†n
    setTimeout(() => {
        // Scroll l√™n ƒë·∫ßu ƒë·ªÉ capture to√†n b·ªô
        element.scrollTop = 0;
        
        // T√≠nh to√°n k√≠ch th∆∞·ªõc th·ª±c t·∫ø c·ªßa element
        const rect = element.getBoundingClientRect();
        const actualHeight = element.scrollHeight;
        const actualWidth = element.scrollWidth;
        
        // T·∫°o ·∫£nh v·ªõi k√≠ch th∆∞·ªõc ph√π h·ª£p ƒë·ªÉ capture to√†n b·ªô n·ªôi dung
        html2canvas(element, {
            scale: 1.2, // Gi·∫£m scale ƒë·ªÉ capture ƒë∆∞·ª£c nhi·ªÅu n·ªôi dung h∆°n
            useCORS: true,
            allowTaint: true,
            backgroundColor: '#ffffff',
            width: Math.max(actualWidth, 1200), // ƒê·∫£m b·∫£o ƒë·ªß r·ªông
            height: Math.max(actualHeight, 800), // ƒê·∫£m b·∫£o ƒë·ªß cao
            scrollX: 0,
            scrollY: 0,
            timeout: 15000
        }).then(canvas => {
            // T·∫°o link download
            const link = document.createElement('a');
            link.download = `Cau-Hinh-PC-TruongPhat-${new Date().toISOString().slice(0,10)}.jpg`;
            link.href = canvas.toDataURL('image/jpeg', 0.92);
            link.click();

            // Restore original buttons v√† header
            allButtons.forEach(btn => {
                btn.style.display = '';
                btn.style.visibility = '';
                btn.style.opacity = '';
            });
            
            // Restore container ch·ª©a buttons
            buttonContainers.forEach(container => {
                container.style.display = '';
                container.style.visibility = '';
            });
            
            if (headerWithButtons) {
                headerWithButtons.style.display = '';
            }
            
            // X√≥a contact info t·∫°m th·ªùi
            const tempContact = element.querySelector('.temp-contact-info');
            if (tempContact) {
                tempContact.remove();
            }
        }).catch(error => {
            console.error('L·ªói t·∫°o ·∫£nh:', error);
            showErrorMessage('‚ùå C√≥ l·ªói khi t·∫°o ·∫£nh! Vui l√≤ng th·ª≠ l·∫°i.');
            
            // Restore original buttons v√† header on error
            allButtons.forEach(btn => {
                btn.style.display = '';
                btn.style.visibility = '';
                btn.style.opacity = '';
            });
            
            // Restore container ch·ª©a buttons on error
            buttonContainers.forEach(container => {
                container.style.display = '';
                container.style.visibility = '';
            });
            
            if (headerWithButtons) {
                headerWithButtons.style.display = '';
            }
            
            // X√≥a contact info t·∫°m th·ªùi
            const tempContact = element.querySelector('.temp-contact-info');
            if (tempContact) {
                tempContact.remove();
            }
        });
    }, 500); // TƒÉng th·ªùi gian ƒë·ª£i ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ components ƒë∆∞·ª£c th√™m
}

// CSS cho trang ch√≠nh - header b·∫£ng m√†u s·∫Øc t∆∞∆°ng ph·∫£n ƒë·∫πp
const mainPageStyles = `
    <style>
        /* Header b·∫£ng v·ªõi m√†u t∆∞∆°ng ph·∫£n t·ªët */
        .config-table th {
            background: linear-gradient(135deg, #7c3aed, #a855f7) !important;
            color: #ffffff !important;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border: 2px solid #5b21b6 !important;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
            padding: 1rem;
            font-size: 0.75rem;
        }
        
        .config-table th:nth-child(1) { background: linear-gradient(135deg, #dc2626, #ef4444) !important; } /* STT - ƒê·ªè */
        .config-table th:nth-child(2) { background: linear-gradient(135deg, #059669, #10b981) !important; } /* H√åNH ·∫¢NH - Xanh l√° */
        .config-table th:nth-child(3) { background: linear-gradient(135deg, #1d4ed8, #3b82f6) !important; } /* T√äN - Xanh d∆∞∆°ng */
        .config-table th:nth-child(4) { background: linear-gradient(135deg, #9333ea, #a855f7) !important; } /* ƒêVT - T√≠m */
        .config-table th:nth-child(5) { background: linear-gradient(135deg, #ea580c, #f97316) !important; } /* S·ªê L∆Ø·ª¢NG - Cam */
        .config-table th:nth-child(6) { background: linear-gradient(135deg, #be185d, #ec4899) !important; } /* ƒê∆†N GI√Å - H·ªìng */
        .config-table th:nth-child(7) { background: linear-gradient(135deg, #0891b2, #06b6d4) !important; } /* TH√ÄNH TI·ªÄN - Cyan */
        .config-table th:nth-child(8) { background: linear-gradient(135deg, #65a30d, #84cc16) !important; } /* B·∫¢O H√ÄNH - Lime */
        .config-table th:nth-child(9) { background: linear-gradient(135deg, #4338ca, #6366f1) !important; } /* GHI CH√ö - Indigo */
        
        .config-table td {
            padding: 1rem;
            font-size: 1rem;
            vertical-align: middle;
        }
        
        .config-table img {
            width: 45px; 
            height: 45px; 
            object-fit: cover; 
            border-radius: 0.5rem; 
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        /* T·ªïng c·ªông n·ªïi b·∫≠t */
        .total-row-display {
            background: linear-gradient(135deg, #059669, #10b981) !important;
            color: white !important;
            font-weight: bold;
            border: none !important;
        }
        
        /* C·ªôt th√†nh ti·ªÅn n·ªïi b·∫≠t trong main page */
        .total-row-display td:nth-child(7) {
            background: linear-gradient(135deg, #fbbf24, #f59e0b) !important;
            border: none !important;
            padding: 0.8rem !important;
        }
        
        .total-row-display td {
            color: white !important;
            font-size: 1.5rem;
            font-weight: 900;
            padding: 1.2rem !important;
            vertical-align: middle;
            text-align: center;
            border: none !important;
        }
        
        /* L√†m n·ªïi b·∫≠t "T·ªîNG C·ªòNG" trong main page */
        .total-row-display td:nth-child(1),
        .total-row-display td:nth-child(2),
        .total-row-display td:nth-child(3) {
            font-size: 1.8rem !important;
        }
        
        /* L√†m n·ªïi b·∫≠t "HO√ÄN THI·ªÜN" trong main page */
        .total-row-display td:nth-child(8),
        .total-row-display td:nth-child(9) {
            font-size: 1.6rem !important;
        }
    </style>
`;

// CSS cho in c·∫•u h√¨nh - ƒë·∫πp v√† chuy√™n nghi·ªáp, v·ª´a 1 trang A4
const printStyles = `
    <style>
        @page {
            size: A4 portrait;
            margin: 10mm;
        }
        
        body { 
            margin: 0; 
            padding: 0; 
            font-family: 'Times New Roman', Times, serif;
            font-size: 7px;
            line-height: 0.9;
            color: #000;
            background: white;
        }
        
        .header {
            text-align: center;
            margin-bottom: 1px;
            border-bottom: 1px solid #2563eb;
            padding-bottom: 0px;
            position: relative;
        }
        
        .date-info {
            position: absolute;
            right: 0;
            bottom: 1px;
            font-size: 10px;
            color: #000;
            font-style: italic;
        }
        
        .company-name {
            font-size: 16px;
            font-weight: bold;
            margin: 0;
            color: #000;
        }
        
        .company-address {
            font-size: 12px;
            margin: 0px 0;
            color: #000;
        }
        
        .document-title {
            font-size: 14px;
            font-weight: bold;
            margin: 1px 0 1px 0;
            color: #000;
            text-transform: uppercase;
        }
        
        .date-info {
            font-size: 15px;
            margin: 0px 0;
            color: #000;
        }
        
        .customer-info {
            margin: 1px 0;
            font-size: 12px;
            line-height: 1.0;
            color: #000;
        }
        
        table { 
            width: 100%; 
            border-collapse: collapse; 
            margin-bottom: 0px;
            font-size: 7px;
            table-layout: fixed;
        }
        
        th, td { 
            border: 1px solid #000; 
            padding: 1px 2px; 
            text-align: center;
            vertical-align: middle;
            color: #000;
            height: 12px;
            line-height: 1.1;
        }
        
        /* X√≥a border ƒëen cho c√°c √¥ trong h√†ng t·ªïng c·ªông */
        .total-row th,
        .total-row td,
        .total-row-display th,
        .total-row-display td {
            border: none !important;
        }
        
        th { 
            background: #e5e7eb !important;
            color: #000 !important;
            font-weight: bold; 
            font-size: 6px;
            text-transform: uppercase;
            height: 14px;
            padding: 2px 3px;
            line-height: 1.0;
        }
        
        /* C·ªôt STT - c√¢n b·∫±ng l·∫°i */
        th:nth-child(1), td:nth-child(1) { width: 6%; }
        /* C·ªôt H√¨nh ·∫£nh - tƒÉng l√™n ƒë·ªÉ c√¢n ƒë·ªëi */
        th:nth-child(2), td:nth-child(2) { width: 10%; }
        /* C·ªôt T√™n linh ki·ªán - gi·∫£m xu·ªëng ƒë·ªÉ c√¢n b·∫±ng */
        th:nth-child(3), td:nth-child(3) { width: 28%; }
        /* C·ªôt ƒêVT */
        th:nth-child(4), td:nth-child(4) { width: 8%; }
        /* C·ªôt S·ªë l∆∞·ª£ng */
        th:nth-child(5), td:nth-child(5) { width: 8%; }
        /* C·ªôt ƒê∆°n gi√° - tƒÉng l√™n ƒë·ªÉ ƒë·∫πp h∆°n */
        th:nth-child(6), td:nth-child(6) { width: 14%; }
        /* C·ªôt Th√†nh ti·ªÅn - tƒÉng l√™n ƒë·ªÉ n·ªïi b·∫≠t */
        th:nth-child(7), td:nth-child(7) { width: 14%; }
        /* C·ªôt B·∫£o h√†nh */
        th:nth-child(8), td:nth-child(8) { width: 8%; }
        /* C·ªôt Ghi ch√∫ */
        th:nth-child(9), td:nth-child(9) { width: 4%; }
        
        td:nth-child(3) { 
            text-align: left; 
            font-size: 12px;
            padding: 2px 3px;
            color: #000;
            line-height: 1.0;
            height: 14px;
        }
        
        /* C√¢n b·∫±ng 3 d√≤ng text trong component names */
        td:nth-child(3) div {
            font-size: 12px !important;
            font-weight: bold !important;
            color: #000 !important;
            margin: 0 !important;
            padding: 0 !important;
            line-height: 1.0 !important;
        }
        
        img { 
            max-width: 40px; 
            max-height: 40px; 
            object-fit: cover;
            border-radius: 2px;
        }
        
        /* T·ªïng c·ªông n·ªïi b·∫≠t v√† c√¢n ƒë·ªëi ho√†n h·∫£o */
        .total-row {
            background: linear-gradient(135deg, #dcfce7, #bbf7d0) !important;
            color: #000 !important;
            font-weight: 900;
            border: none !important;
            text-align: center;
        }
        
        .total-row td {
            font-size: 9px !important;
            font-weight: 900 !important;
            padding: 4px 3px !important;
            color: #000 !important;
            height: 18px !important;
            text-transform: uppercase;
            text-align: center !important;
            vertical-align: middle !important;
            line-height: 1.1;
            border: none !important;
        }
        
        /* L√†m n·ªïi b·∫≠t c·ªôt "T·ªîNG C·ªòNG" */
        .total-row td:nth-child(1),
        .total-row td:nth-child(2),
        .total-row td:nth-child(3) {
            font-size: 18px !important;
            font-weight: 900 !important;
            letter-spacing: 0.5px;
        }
        
        /* L√†m n·ªïi b·∫≠t c·ªôt "TH√ÄNH TI·ªÄN" - gi√° ti·ªÅn */
        .total-row td:nth-child(7) {
            font-size: 14px !important;
            font-weight: 900 !important;
            color: #92400e !important;
            background: linear-gradient(135deg, #fbbf24, #f59e0b) !important;
            border: none !important;
            text-shadow: 0 1px 2px rgba(255,255,255,0.8);
            padding: 8px 6px !important;
            border-radius: 3px;
        }
        
        /* ƒê·∫£m b·∫£o text trong print in ƒë·∫πp */
        .total-row td:nth-child(7) div {
            border-radius: 3px !important;
            background: linear-gradient(135deg, #fbbf24, #f59e0b) !important;
            border: none !important;
        }
        
        /* Lo·∫°i b·ªè ho√†n to√†n m·ªçi border ƒëen trong t·ªïng c·ªông */
        .total-row *,
        .total-row-display * {
            border: none !important;
        }
        
        /* C√°c c·ªôt kh√°c trong t·ªïng c·ªông */
        .total-row td:nth-child(4),
        .total-row td:nth-child(5),
        .total-row td:nth-child(6) {
            font-size: 9px !important;
            opacity: 0.8;
        }
        
        /* C·ªôt B·∫¢O H√ÄNH v√† GHI CH√ö n·ªïi b·∫≠t h∆°n */
        .total-row td:nth-child(8),
        .total-row td:nth-child(9) {
            font-size: 12px !important;
            font-weight: 900 !important;
            opacity: 1;
        }
        
        .warranty-note {
            page-break-before: always;
            margin-top: 20px;
            font-size: 14px;
            color: #000;
            line-height: 1.1;
        }
        
        .bank-info {
            font-size: 14px;
            font-weight: bold;
            color: #000;
            margin-bottom: 1px;
        }
        
        .footer-info {
            margin-top: 30px;
            padding-top: 20px;
            font-size: 14px;
            text-align: center;
            color: #000;
            height: 200px;
        }
        
        /* ƒê·∫£m b·∫£o warranty-note v√† footer lu√¥n ·ªü trang m·ªõi */
        @media print {
            .warranty-note {
                break-before: page;
                page-break-before: always;
            }
            .footer-info {
                break-before: avoid;
                page-break-before: avoid;
            }
        }
        
        /* Component name styles - t·∫•t c·∫£ 3 d√≤ng ƒë·ªÅu to v√† bold nh∆∞ nhau */
        .component-name {
            color: #000 !important;
            font-weight: bold !important;
            font-size: 5px !important;
        }
        
        .component-brand {
            color: #000 !important;
            font-size: 5px !important;
            font-weight: bold !important;
        }
        
        @media print { 
            body { 
                margin: 0; 
                color: #000 !important;
                background: white !important;
            }
            * { 
                -webkit-print-color-adjust: exact !important;
                color-adjust: exact !important;
                color: #000 !important;
            }
            table * {
                color: #000 !important;
            }
            .total-row * {
                color: #000 !important;
            }
            
            /* T·∫Øt m·∫∑c ƒë·ªãnh headers and footers */
            @page {
                margin: 10mm;
                /* Lo·∫°i b·ªè header v√† footer m·∫∑c ƒë·ªãnh c·ªßa tr√¨nh duy·ªát */
                size: A4 portrait;
            }
            
            /* T·∫Øt background graphics v√† ƒë·∫£m b·∫£o in s·∫°ch */
            html {
                -webkit-print-color-adjust: exact !important;
                color-adjust: exact !important;
                print-color-adjust: exact !important;
            }
            
            /* Lo·∫°i b·ªè m·ªçi background image khi in */
            * {
                background-image: none !important;
                box-shadow: none !important;
                text-shadow: none !important;
            }
        }
    </style>
`;

// Function in c·∫•u h√¨nh - Phi·∫øu xu·∫•t b√°n h√†ng A4 ƒë·∫ßy ƒë·ªß th√¥ng tin
function printConfiguration() {
    const configContent = document.getElementById('final-config-table');
    if (!configContent) {
        showErrorMessage('‚ùå Kh√¥ng t√¨m th·∫•y n·ªôi dung c·∫•u h√¨nh!');
        return;
    }
    
    // T·∫°o b·∫£n sao v√† x√≥a c√°c ph·∫ßn kh√¥ng c·∫ßn thi·∫øt cho in
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = configContent.innerHTML;
    
    // X√≥a header "TR∆Ø·ªúNG PH√ÅT COMPUTER XIN G·ª¨I..." v√† header ƒë·ªè c√≥ ng√†y th√°ng
    const headerElements = tempDiv.querySelectorAll('h1, .header-title, [style*="TR∆Ø·ªúNG PH√ÅT COMPUTER XIN G·ª¨I"], [style*="background: linear-gradient(135deg, #dc2626, #b91c1c)"]');
    headerElements.forEach(el => el.remove());
    
    // X√≥a c√°c n√∫t "L∆∞u ·∫¢nh HD", "In C·∫•u H√¨nh"
    const buttons = tempDiv.querySelectorAll('button, .action-buttons, [onclick*="save"], [onclick*="print"]');
    buttons.forEach(el => el.remove());
    
    // X√≥a ph·∫ßn li√™n h·ªá, footer v√† c√°c ph·∫ßn kh√¥ng c·∫ßn thi·∫øt trong b·∫£n in
    const contactSections = tempDiv.querySelectorAll('.contact-section, .contact-grid, .footer, [style*="Li√™n H·ªá"], [style*="AMD Build"], [style*="PUBG"], .temp-contact-info, .contact-section-bottom, [style*="margin-top: 1rem; display: flex; justify-content: center"]');
    contactSections.forEach(el => el.remove());
    
    // Chuy·ªÉn t·∫•t c·∫£ ch·ªØ m√†u tr·∫Øng th√†nh m√†u ƒëen
    const whiteTextElements = tempDiv.querySelectorAll('*');
    whiteTextElements.forEach(el => {
        const style = el.getAttribute('style') || '';
        if (style.includes('color: #ffffff') || style.includes('color: white') || style.includes('color: #f8fafc') || style.includes('color: #e5e7eb')) {
            el.setAttribute('style', style.replace(/color:\s*(#ffffff|white|#f8fafc|#e5e7eb)/g, 'color: #000'));
        }
        
        // ƒê·∫∑c bi·ªát cho c√°c component names
        if (el.textContent && (el.textContent.includes('CPU') || el.textContent.includes('Mainboard') || el.textContent.includes('RAM') || el.textContent.includes('SSD') || el.textContent.includes('VGA') || el.textContent.includes('HDD') || el.textContent.includes('Monitor') || el.textContent.includes('Case') || el.textContent.includes('T·∫£n Nhi·ªát') || el.textContent.includes('Ngu·ªìn'))) {
            el.className += ' component-name';
        }
    });
    
    // ƒê·∫£m b·∫£o t·ªïng c·ªông c√≥ class ƒë√∫ng
    const totalRows = tempDiv.querySelectorAll('tr[style*="background: linear-gradient(135deg, #059669, #10b981)"], .total-row-display');
    totalRows.forEach(row => {
        row.className = 'total-row';
        
        // C·∫≠p nh·∫≠t t·ªïng c·ªông v·ªõi t·∫•t c·∫£ components
        const updatedTotal = getTotalPrice();
        const totalCell = row.querySelector('td:nth-child(7)');
        if (totalCell) {
            totalCell.innerHTML = `
                <div style="text-align: center; line-height: 1.1; padding: 2px; background: linear-gradient(135deg, #fbbf24, #f59e0b); border-radius: 3px;">
                    <span style="font-size: 16px; font-weight: 900; color: #92400e;">${new Intl.NumberFormat('vi-VN').format(updatedTotal)}</span><span style="font-size: 11px; font-weight: 700; color: #78350f; margin-left: 2px;">VNƒê</span>
                </div>
            `;
        }
    });
    
    
    const printWindow = window.open('', '_blank');
    const printContent = `
        <!DOCTYPE html>
        <html>
        <head>
            <title>Phi·∫øu Xu·∫•t B√°n H√†ng - Tr∆∞·ªùng Ph√°t Computer</title>
            <meta charset="UTF-8">
            ${printStyles}
        </head>
        <body>
            <div class="header">
                <div class="company-name">TR∆Ø·ªúNG PH√ÅT COMPUTER H√íA B√åNH</div>
                <div class="company-address">S·ªë 399 Tr·∫ßn H∆∞ng ƒê·∫°o - Ph∆∞∆°ng L√¢m - TP H√≤a B√¨nh</div>
                <div class="company-address">SƒêT: 083 676 8597</div>
                <div class="document-title">PHI·∫æU XU·∫§T B√ÅN H√ÄNG KI√äM B·∫¢O H√ÄNH</div>
                <div class="date-info">Ng√†y ${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}</div>
            </div>
            
            <div class="customer-info">
                <strong>T√™n kh√°ch h√†ng:</strong> _____________________ <strong>SƒêT:</strong> _____________<br>
                <strong>ƒê·ªãa ch·ªâ:</strong> ________________________________________________<br>
                <strong>L√Ω do xu·∫•t kho:</strong> B√°n h√†ng
            </div>
            
            ${tempDiv.innerHTML}
            
            <div class="warranty-note">
                <div class="bank-info">
                    STK: 8990124112002 - NGUY√äN TH√ÄNH NAM - MB Bank
                </div>
                
                <div style="border: 2px solid #000; padding: 8px; margin: 5px 0; background: #f8f9fa;">
                    <div style="font-weight: bold; text-align: center; margin-bottom: 5px; font-size: 12px; color: #d97706;">‚è∞ TH·ªúI GIAN L√ÄM VI·ªÜC & QUY ƒê·ªäNH B·∫¢O H√ÄNH</div>
                    
                    <div style="margin-bottom: 4px;">
                        <strong>üìÖ Gi·ªù l√†m vi·ªác:</strong> S√°ng 8:00-12:00, Chi·ªÅu 14:00-18:00 (Ch·ªß nh·∫≠t ngh·ªâ)
                    </div>
                    
                    <div style="font-weight: bold; margin: 4px 0; color: #dc2626;">üîß QUY ƒê·ªäNH B·∫¢O H√ÄNH:</div>
                    
                    <div style="margin-left: 10px; line-height: 1.3;">
                        <div style="margin-bottom: 2px;">
                            <strong>1.</strong> ‚ùå H·∫øt th·ªùi gian BH, m·∫•t phi·∫øu BH, bi·∫øn d·∫°ng, tr·∫ßy x∆∞·ªõc, kh√¥ng c√≥ tem BH h·ª£p l·ªá
                        </div>
                        <div style="margin-bottom: 2px;">
                            <strong>2.</strong> ‚ö° Ngu·ªìn ƒëi·ªán kh√¥ng ·ªïn ƒë·ªãnh, t·ª± √Ω thay linh ki·ªán, update BIOS, thay ƒë·ªïi k·ªπ thu·∫≠t
                        </div>
                        <div style="margin-bottom: 2px;">
                            <strong>3.</strong> üå°Ô∏è M√¥i tr∆∞·ªùng kh√¥ng t·ªët: ·∫©m, oxy h√≥a, th·∫•m n∆∞·ªõc, g·ªâ s√©t, b·ª•i b·∫©n, v·ª° g√£y
                        </div>
                    </div>
                </div>							

            </div>
            
            <div class="footer-info" style="margin-top: 30px; padding-top: 20px;">
                <div style="display: flex; justify-content: space-between; align-items: end; height: 150px;">
                    <div style="text-align: center; width: 45%;">
                        <strong style="font-size: 16px;">B√äN MUA</strong><br>
                        <em style="font-size: 12px;">(K√Ω, h·ªç t√™n)</em>
                        <div style="border-bottom: 1px solid #000; margin: 80px 20px 10px 20px;"></div>
                    </div>
                    <div style="text-align: center; width: 45%;">
                        <strong style="font-size: 16px;">B√äN B√ÅN</strong><br>
                        <em style="font-size: 12px;">(K√Ω, h·ªç t√™n)</em>
                        <div style="border-bottom: 1px solid #000; margin: 80px 20px 10px 20px;"></div>
                    </div>
                </div>
            </div>
        </body>
        </html>
    `;
    
    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.focus();
    
    setTimeout(() => {
        printWindow.print();
    }, 500);
} 